/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;


import com.google.common.io.BaseEncoding;
import org.junit.jupiter.api.Test;

import java.util.HashSet;

import static basiclibrary.Library.temp;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
    @Test void testRollMethod() {
        // Create an instance of DiceRoller class
        Library diceRoller = new Library();

        // Test case 1: Roll the dice once
        int n1 = 1;
        int[] rolls1 = diceRoller.roll(n1);
        assertEquals(n1, rolls1.length, "Expected length of rolls1 array to be " + n1);

        // Test case 2: Roll the dice multiple times
        int n2 = 5;
        int[] rolls2 = diceRoller.roll(n2);
        assertEquals(n2, rolls2.length, "Expected length of rolls2 array to be " + n2);

        // Test case 3: Roll the dice zero times
        int n3 = 0;
        int[] rolls3 = diceRoller.roll(n3);
        assertEquals(n3, rolls3.length, "Expected length of rolls3 array to be " + n3);
    }


    // Define the test method for the temp() method
    @Test
    void testTemp() {

        Library sut = new Library();

        // Test data
        int[][] weeklyMonthTemperatures = {
                {1,2,3},
                {5,6,7}
        };
        // Invoke the temp() method from the Temp class
        StringBuilder sBuilder = Library.temp(weeklyMonthTemperatures);

        // Check if the StringBuilder sb is equal to the expected output for temperatures not found
        String expectedOutput = "High: 7\nLow: 1\nNever saw temperature: 4\n";
        System.out.println(expectedOutput);
        System.out.println(sBuilder.toString());
        assertEquals(sBuilder.toString(), expectedOutput, "Expected output for missing temperature not found");
    }

}
