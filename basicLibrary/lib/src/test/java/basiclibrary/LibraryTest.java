/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;


import com.google.common.io.BaseEncoding;
import org.junit.jupiter.api.Test;

import java.util.HashSet;

import static basiclibrary.Library.temp;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
    @Test void testRollMethod() {
        // Create an instance of DiceRoller class
        Library diceRoller = new Library();

        // Test case 1: Roll the dice once
        int n1 = 1;
        int[] rolls1 = diceRoller.roll(n1);
        assertEquals(n1, rolls1.length, "Expected length of rolls1 array to be " + n1);

        // Test case 2: Roll the dice multiple times
        int n2 = 5;
        int[] rolls2 = diceRoller.roll(n2);
        assertEquals(n2, rolls2.length, "Expected length of rolls2 array to be " + n2);

        // Test case 3: Roll the dice zero times
        int n3 = 0;
        int[] rolls3 = diceRoller.roll(n3);
        assertEquals(n3, rolls3.length, "Expected length of rolls3 array to be " + n3);
    }


    // Define the test method for the temp() method
    @Test
    void testTemp() {
        // Test data
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int min = weeklyMonthTemperatures[0][0];
        int max = weeklyMonthTemperatures[0][0];
        HashSet<Integer> diffTemps = new HashSet<>();

        // Invoke the temp() method from the Temp class
        StringBuilder sb = Library.temp();

        // Assertions
        // Check if the minimum temperature is calculated correctly
        assertEquals(52, min, "Expected minimum temperature does not match");

        // Check if the maximum temperature is calculated correctly
        assertEquals(72, max, "Expected maximum temperature does not match");

        // Check if all temperatures in the expected range are found in the diffTemps hash set
        for (int i = 52; i <= 72; i++) {
            assertTrue(diffTemps.contains(i), "Expected temperature " + i + " not found");
        }

        // Check if the StringBuilder sb contains the expected output for temperatures not found
        String expectedOutput = "Never saw temperature: 63\n";
        assertTrue(sb.toString().contains(expectedOutput), "Expected output for missing temperature not found");
    }

}
