/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;


public class Library {

    public static void main(String[] args){

        List<String> votes =  new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        int[][] weeklyMonthTemperatures = {
            {66, 64, 58, 65, 71, 57, 60},
            {57, 65, 65, 70, 72, 65, 51},
            {55, 54, 60, 53, 59, 57, 61},
            {65, 56, 55, 52, 55, 62, 57}
   };

        // Calling our Roll Function
        roll(2);
        temp(weeklyMonthTemperatures);

    }
    public boolean someLibraryMethod() {
        return true;
    }

    // this will Tally how many votes there are and return the user with the most votes.


public static  StringBuilder temp(int[][] weeklyMonthTemperatures){


//    int[][] weeklyMonthTemperatures = {
//            {66, 64, 58, 65, 71, 57, 60},
//            {57, 65, 65, 70, 72, 65, 51},
//            {55, 54, 60, 53, 59, 57, 61},
//            {65, 56, 55, 52, 55, 62, 57}
//    };
    int min = weeklyMonthTemperatures[0][0];                            //first index of import hash
    int max = weeklyMonthTemperatures[0][0];                            //first index of import hash
    HashSet<Integer> diffTemps = new HashSet<>();

    //new hash diffTemps
    for (int[] weeklyTemperatures : weeklyMonthTemperatures) {           //iterates through the
        for (int temperature : weeklyTemperatures) {                     //iterates the temps for each day of the week
            if (temperature < min) {                                     //compares
                min = temperature;
            } else if (temperature > max) {                              //compares
                max = temperature;
            }
            diffTemps.add(temperature);
        }
    }


    StringBuilder sb = new StringBuilder();
    sb.append("High: " + max + "\n" );
    sb.append("Low: " + min + "\n");
    for (int i = min; i <= max; i++) {
        if (!diffTemps.contains(i)) {
            sb.append("Never saw temperature: ").append(i).append("\n");
        }
    }

    //print the results
//    System.out.println("High: " + max);
//    System.out.println("Low: " + min);
    System.out.println(sb.toString());

    return sb;

}

//public static String tally(List<String> votes){
//        HashMap<String, Integer> voteCounts = new HashMap<>();
//
//        for (String vote: votes){
//            if (voteCounts.containsKey(vote)) {
//                voteCounts.put(vote, voteCounts.get(vote)+1);
//            }else{
//                voteCounts.put(vote, 1);
//            }idea .
//        }
//        String winner = null;
//        int maxVotes = 0;
//        for(Map.Entry<String, Integer> entry : voteCounts.entrySet()){
//            String plant = entry.getKey();
//            int voteCount
//        }
//}
    public static int[] roll(int n) {
        /*
        Roll a six-sided dice n times and return an array containing the values of the rolls.

        Args:
        n (int): The number of times to roll the dice.

        Returns:
        int[]: An array containing the values of the rolls.
        */
        // Create a Random object to generate random numbers
        Random random = new Random();

        // Create an array to store the values of the rolls
        int[] rolls = new int[n];

        // Roll the dice n times and store the values in the array
        for (int i = 0; i < n; i++) {
            // Generate a random number between 1 and 6 (inclusive)
            int roll = random.nextInt(6) + 1;

            // Store the value in the array
            System.out.println("This is a Dice roll " + roll);
            rolls[i] = roll;
        }

        // Return the array containing the values of the rolls
        return rolls;
    }

}




